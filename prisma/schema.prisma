generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {

  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sentMessages      Message[]        @relation("SentMessages")
  messageSeen       MessageSeen[]
  userConversations UserConversation[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])

}

model Message {
  id              String       @id @default(cuid()) @map("_id")
  content         String
  mediaUrl        String?
  userId          String
  conversationId  String
  sender          User         @relation("SentMessages", fields: [userId], references: [id])
  conversation    Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  wasEdited       Boolean      @default(false)
  expiresAt       DateTime?
  isExpired       Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  messageSeen     MessageSeen[]
}

model Conversation {
  id                String             @id @default(cuid()) @map("_id")
  messages          Message[]          @relation("ConversationMessages")
  userConversations UserConversation[]
  conversationBots  ConversationBot[]
  isGroup           Boolean?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model UserConversation {
  id              String       @id @default(cuid()) @map("_id")
  userId          String
  conversationId  String
  user            User         @relation(fields: [userId], references: [id])
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  createdAt       DateTime     @default(now())
}

model MessageSeen {
  id              String       @id @default(cuid()) @map("_id")
  userId          String
  messageId       String
  user            User         @relation(fields: [userId], references: [id])
  message         Message      @relation(fields: [messageId], references: [id])
  seenAt          DateTime     @default(now())
}

model ConversationBot {
  id              String       @id @default(cuid()) @map("_id")
  conversationId  String
  botId           String
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  bot             Bot          @relation(fields: [botId], references: [id])
  createdAt       DateTime     @default(now())
}

model Bot {
  id              String       @id @default(cuid()) @map("_id")
  name            String
  conversationBots ConversationBot[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}
